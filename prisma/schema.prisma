generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector]
}

model taskDefinitions {
  id                    String   @id @default(uuid())
  userId                String
  agentId               String
  isSystem              Boolean  @default(false)
  name                  String
  description           String
  instructions          String
  startNewThread        Boolean  @default(false)
  serverDataIds         String[]
  serverToolIds         String[]
  clientToolIds         String[]
  modelId               String
  maximumOutputTokens   Int?
  temperature           Float?

  @@unique([agentId, name], name: "taskDefinition_agentId_name") // Composite unique constraint
  @@map("superexpert_ai_taskDefinitions")
}

model messages {
  id           Int      @id @default(autoincrement())
  agentId      String
  userId       String
  task         String
  thread       String
  role         String
  content      String
  tool_calls   Json?
  tool_call_id String?
  createdAt    DateTime @default(now())

  @@map("superexpert_ai_messages")
}

model memories {
  id            Int      @id @default(autoincrement())
  userId        String
  content       String
  expiresInDays Int
  createdAt     DateTime @default(now())

  @@map("superexpert_ai_memories")
}

model users {
  id       String @id @default(uuid())
  email    String @unique
  password String

  @@map("superexpert_ai_users")
}

model profiles {
  id     String @id @default(uuid())
  userId String
  name   String
  value  String

  @@unique([userId, name], name: "userId_name") // Composite unique constraint
  @@map("superexpert_ai_profiles")
}

model agents {
  id          String @id @default(uuid())
  userId      String
  name        String @unique
  description String

  @@unique([userId, name], name: "agent_userId_name") // Composite unique constraint
  @@map("superexpert_ai_agents")
}

model consents {
  id        String @id @default(uuid())
  userId    String
  type      String
  createdAt DateTime @default(now())
  

  @@unique([userId, type], name: "consent_userId_type") // Composite unique constraint
  @@map("superexpert_ai_consents")
}


model corpora {
  id          String @id @default(uuid())
  userId      String
  name        String
  description String
  createdAt   DateTime @default(now())
  corporus    corpus[]  // Relation field

  @@map("superexpert_ai_corpera")
}


model corpus {
  id            String @id @default(uuid())
  userId        String
  fileName      String
  chunkSize     Int
  chunkOverlap  Int
  createdAt     DateTime @default(now())
  corporaChunks corpusChunks[]  // Relation field

  corporaId String   // Foreign key field
  corpora   corpora  @relation(fields: [corporaId], references: [id])


  @@map("superexpert_ai_corpus")
}

model corpusChunks {
  id        Int      @id @default(autoincrement())
  userId    String
  chunk     String
  embedding Unsupported("vector(1536)")?
  corpusId  String   // Foreign key field
  corpus    corpus  @relation(fields: [corpusId], references: [id])

  @@map("superexpert_ai_corpusChunks")
}